{"code":"import { ref } from \"vue\";\r\nconst local = ref(undefined);\r\nconst getOptionsValue = (target, options) => {\r\n    if (options === undefined)\r\n        return \"\";\r\n    if (local.value === undefined)\r\n        return \"\";\r\n    const targetSplitArray = target.split(\".\");\r\n    targetSplitArray.unshift(local.value);\r\n    let current = options;\r\n    while (targetSplitArray.length > 0) {\r\n        current = current[targetSplitArray[0]];\r\n        if (current === undefined) {\r\n            return \"\";\r\n        }\r\n        targetSplitArray.shift();\r\n    }\r\n    if (typeof current === \"string\") {\r\n        return current;\r\n    }\r\n    return \"\";\r\n};\r\nexport const changeLocal = (value) => {\r\n    local.value = value;\r\n};\r\nconst plugin = {\r\n    install: (app, ...options) => {\r\n        if (options.length === 0)\r\n            return \"\";\r\n        if (typeof options[0] !== \"object\")\r\n            return \"\";\r\n        local.value = options[0].initial;\r\n        app.config.globalProperties.$t = (target) => {\r\n            return getOptionsValue(target, options[0].translationConfiguration);\r\n        };\r\n    },\r\n};\r\nexport default plugin;\r\n","references":["/Users/mmmddd/Desktop/code/vue3-i18n/node_modules/vue/dist/vue.d.ts"],"dts":{"name":"/Users/mmmddd/Desktop/code/vue3-i18n/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { App } from \"vue\";\r\nexport interface I18nOptions {\r\n    initial: string;\r\n    translationConfiguration: Record<string, any>;\r\n}\r\nexport interface I18n {\r\n    install: (app: App, ...options: any[]) => any;\r\n}\r\nexport declare const changeLocal: (value: string) => void;\r\ndeclare const plugin: I18n;\r\nexport default plugin;\r\n"}}
